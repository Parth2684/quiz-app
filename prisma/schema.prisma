// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(uuid())
  name        String      
  email       String      @unique
  password    String?
  provider    String    
  attemptedQuiz QuizAttempt[]  
  verified    Boolean
  jwt         String?   @unique
  jwtExpiry   DateTime?
  createdQuiz Quiz[]
  image       String?
}

model QuizAnswer {
  id          String    @id @default(uuid())
  quizAttemptId String
  questionId  String
  optionId    String
  quizId      String
  quizAttempt QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question    Question     @relation(fields: [questionId], references: [id])
  option      Option       @relation(fields: [optionId], references: [id])
}


model Quiz {
  id                String         @id @default(uuid())
  name              String
  description       String?
  createdById         String    
  createdAt         DateTime  @default(now())  
  questions         Question[]
  options           Option[] 
  createdBy         User  @relation(fields: [createdById], references: [id], onDelete: Cascade)
  quizAttempt     QuizAttempt[]
}

model Question {
  id                String      @id @default(uuid())
  question          String      
  quizId            String
  quiz              Quiz  @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options           Option[]
  answers         QuizAnswer[]
}

model Option {
  id                String      @id @default(uuid())
  option           String
  isCorrect         Boolean 
  questionId        String
  quizId            String
  question          Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers         QuizAnswer[]
  quiz            Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id              String      @id @default(uuid())
  userId          String      
  quizId          String
  score           Int
  attemptedAt     DateTime    @default(now())
  user            User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz            Quiz  @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers         QuizAnswer[]

  @@unique([userId, quizId])
}


